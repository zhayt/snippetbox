package main

import (
	"bytes"
	"net/http"
	"testing"
)

func TestPing(t *testing.T) {
	/*
		// Create a new instance of our application struct. For now, this just
		// contains a couple of mock loggers (which discard anything written to them).
		app := &application{
			errorLog: log.New(ioutil.Discard, "", 0),
			infoLog:  log.New(ioutil.Discard, "", 0),
		}

		// We then use the httptest.NewTLSServer() function to create a new test
		// server, passing in the value returned by our app.routes() method as the
		// Handler for the server. This starts up an HTTPS server which listens on a
		// randomly-chosen port of your local machine for the duration of the test.
		// Notice that we defer a call to ts.Close() shutdown the server when
		// the test finishes.
		ts := httptest.NewTLSServer(app.routes())
		defer ts.Close()

		/*
			// Initialize anew httptest.ResponseRecorder.
			rr := httptest.NewRecorder()

			// Initialize a new dummy http.Request.
			r, err := http.NewRequest("GET", "/", nil)
			if err != nil {
				t.Fatal(err)
			}

			// Call the ping handler function, passing in the
			// httptest.ResponseRecorder and http.Request.
			ping(rr, r)

			// Call the Result() method on the http.ResponseRecorder to get the
			// http.Response generated by the ping handler.
			rs := rr.Result()
		**/
	/*
		// The network address that the test server is listening on is contained
		// in the ts.URL field. We can use this along with the ts.Client().Get()
		// method to make a GET /ping request against the test server. This returns
		// a http.Response struct containing the response.
		rs, err := ts.Client().Get(ts.URL + "/ping")
		if err != nil {
			t.Fatal(err)
		}

		// We can then examine the http.Response to check that the status code
		// written by the ping handler was 200.
		if rs.StatusCode != http.StatusOK {
			t.Errorf("want %d; got %d", http.StatusOK, rs.StatusCode)
		}

		// And we can check that the response body written by the ping handler
		// equal "OK".
		defer rs.Body.Close()
		body, err := io.ReadAll(rs.Body)
		if err != nil {
			t.Fatal(err)
		}

		if string(body) != "OK" {
			t.Errorf("want body to equal %q", "OK")
		}*/

	app := newTestApplication(t)
	ts := newTestServer(t, app.routes())
	defer ts.Close()

	code, _, body := ts.get(t, "/ping")

	if code != http.StatusOK {
		t.Errorf("want %d; got %d", http.StatusOK, code)
	}

	if string(body) != "OK" {
		t.Errorf("want body to equal %q", "OK")
	}
}

func TestShowSnippet(t *testing.T) {
	// Create a new instance of our application struct which uses the mocked dependencies.
	app := newTestApplication(t)

	// Establish a new test server for running end-to-end tests.
	ts := newTestServer(t, app.routes())
	defer ts.Close()

	// Set up some table-driven tests to check the responses sent by our
	// application for different URLs
	tests := []struct {
		name     string
		urlPath  string
		wantCode int
		wantBody []byte
	}{
		{"Valid ID", "/snippet/1", http.StatusOK, []byte("An old silent pond...")},
		{"Non-existent ID", "/snippet/2", http.StatusNotFound, nil},
		{"Negative ID", "/snippet/-1", http.StatusNotFound, nil},
		{"Decimal ID", "/snippet/1.23", http.StatusNotFound, nil},
		{"String ID", "/snippet/foo", http.StatusNotFound, nil},
		{"Empty ID", "/snippet/", http.StatusNotFound, nil},
		{"Trailing slash", "/snippet/1/", http.StatusNotFound, nil},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			code, _, body := ts.get(t, tt.urlPath)

			if code != tt.wantCode {
				t.Errorf("want %d; got %d", tt.wantCode, code)
			}

			if !bytes.Contains(body, tt.wantBody) {
				t.Errorf("want body to contain %d", tt.wantBody)
			}
		})
	}
}
